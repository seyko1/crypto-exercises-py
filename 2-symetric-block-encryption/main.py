from functions import *

# Cr√©ation d'un crypto-syst√®me jouet, un r√©seau de substitution √† 2 tours
# Utilisation d'une permutation triviale / identit√©.

# Le principe de permutation consiste √† faire passer des bits qui ont √©t√© influenc√©s par une boite s
# dans un endroit ou ils vont √™tre influenc√©s par une autre boite p

# L'√©tape de permutation n'existe pas ici car on en a qu'une seule,
# Elle prend 4 bits en entr√©e et fournit 4 bits en sortie

# On utilisera la bo√Æte S de PRESENT vu en cours

# -------------------------------------------------

# Question 1.5 (tester l'√©galit√©)

print('----- Chiffrement avec un nibble [0, 15] -----')

msg = 1
key = (7, 8)

cipher = enc(msg, key)
print('Message :', msg)
print('Cl√© :', key)
print('Chiffr√© :', cipher)

decipher = dec(cipher, key)
print('D√©chiffr√© :', decipher)

# Question 2.2

print('\n')
print('----- Chiffrement avec un octet -----')

msg = 137

cipher = enc_bytes(msg, key)
print('Message :', msg)
print('Cl√© :', key)
print('Chiffr√© :', cipher)

decipher = dec_bytes(cipher, key)
print("D√©chiffr√© :", decipher)

# Question 2.3

print('\n')
print('----- Chiffrement avec caract√®re ascii -----')

msg = 'M'

cipher = enc_bytes(ord(msg), key)
print('Message :', msg)
print('Cl√© :', key)
print('Chiffr√© :', cipher)

decipher = dec_bytes(cipher, key)
print("D√©chiffr√© :", chr(decipher))

# Question 2.4

print('\n')
print('----- Chiffrement d\'un fichier -----')

file = 'files/pwet.txt'
print('Fichier √† chiffrer :', file)
enc_file_name = enc_file(file, key)
print('Message chiffr√© dans :', enc_file_name)

# Question 2.5

dec_file_name = dec_file(enc_file_name, key)
print('Message d√©chiffr√© dans :', dec_file_name)

print('\n')
print('----- Chiffrement du fichier test.txt avec la cl√© (9,0) -----')

key = (9, 0)
file = 'files/test.txt'
print('Fichier √† chiffrer :', file)
enc_file_name = enc_file(file, key)
print('Message chiffr√© dans :', enc_file_name, 'üëΩÔ∏è')
# output : boYboY1/1boYboY1;

# Question 3.1
# On constate qu'une partie du chiffr√© est le m√™me pour une partie du message en clair "coucou".

# Question 3.2

# Une attaque possible serait de capturer et r√©utiliser des blocs de message chiffr√© r√©p√©titif pour tenter de manipuler le texte brut d√©chiffr√©.
# Ce bloc rejou√© pourrait repr√©sent√©e une donn√©e sensible.
# Une analyse de fr√©quence comme pour vigenere pourrait √©galement √™tre utilis√©e par un attaquant pour en d√©duire le texte en clair.

print('\n')
print('----- Chiffrement du fichier test.txt avec CBC -----')

print('Fichier √† chiffrer :', file)

# vecteur d'initialisation qui servira au chiffrement et au d√©chiffrement
init_vector = random.randint(0, 255)

enc_file_name = enc_file_cbc(file, key, init_vector)
print('Message chiffr√© dans :', enc_file_name, 'üëΩÔ∏è')

print('Fichier √† d√©chiffrer :', enc_file_name)
dec_file_name = dec_file_cbc(enc_file_name, key, init_vector)
print('Message d√©chiffr√© dans :', dec_file_name, 'üëΩÔ∏è')

# Question 3.4

# Le chiffr√© du message test.txt ne contient plus de r√©p√©tition lorsqu'il est chiffr√© dans le mode CBC.
# L‚Äôavantage de la g√©n√©ration al√©atoire du vecteur d‚Äôinitialisation est de rendre le message unique
# et de corriger les vuln√©rabilit√©s du mode ECB utilis√© pr√©cedemment.